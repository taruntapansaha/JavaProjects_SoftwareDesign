package game;

import com.sun.glass.ui.Size;

import java.util.Random;

public class MineSweeper {
  private final int SIZE = 10;

  public enum CellStatus {UNEXPOSED, EXPOSED, SEALED}
  public CellStatus[][] cellStatus = new CellStatus[SIZE][SIZE];
  public boolean exposeNeighborsCalled;
  public enum GameStatus {INPROGRESS, WON, LOST}
  public boolean[][] mines = new boolean[SIZE][SIZE];

  MineSweeper() {
    for (int i = 0; i < SIZE; i++) {
      for (int j = 0; j < SIZE; j++) {
          cellStatus[i][j] = CellStatus.UNEXPOSED;
      }
    }
  }

  public void exposeCell(int row, int column) {
    if (cellStatus[row][column] == CellStatus.UNEXPOSED && !isAdjacent(row, column) && !isMined(row, column)) {
      cellStatus[row][column] = CellStatus.EXPOSED;
      exposeNeighbors(row, column);
    }
  }

  public void exposeNeighbors(int row, int column) {
    exposeNeighborsCalled = true;
    for(int i = row - 1; i <= row + 1; i++) {
      for(int j = column - 1; j <= column + 1; j++) {
        if(i >= 0 && i < SIZE && j >= 0 && j < SIZE)
          exposeCell(i, j);
        }
      }
  }

  public void toggleSeal(int row, int column) {
    switch(cellStatus[row][column]) {
      case UNEXPOSED:
        cellStatus[row][column] = CellStatus.SEALED;
        break;

      case SEALED:
        cellStatus[row][column] = CellStatus.UNEXPOSED;
    }
  }

  public CellStatus getCellStatus(int i, int j) { //Venkat: row, column
  return cellStatus[i][j];
}

  public Boolean isAdjacent(int row, int column){
    return false;
  }

  public Boolean isMined(int row, int column) {
    if (mines[row][column] == true)
      return true;
    return false;
  }

  public GameStatus getGameStatus() {
    for (int i = 0; i < SIZE; i++) {
      for (int j = 0; j < SIZE; j++) {
        if ((cellStatus[i][j]) == CellStatus.UNEXPOSED) {
          return GameStatus.INPROGRESS;
      }
    }
  }return GameStatus.INPROGRESS;
  }

  public void setMines(){
    Random random = new Random();
    int count = 0;

    while(count < SIZE){
      int randomNumber = random.nextInt(99);
      int row = randomNumber / 10;
      int column = randomNumber % 10;

      if(!isMined(row, column)){
        mines[row][column] = true;
        count += 1;
      }
    }

  }
}